<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.longfor.longjian.houseqm.dao.zj2db.UserInHouseQmCheckTaskMapper">
    <resultMap id="BaseResultMap" type="com.longfor.longjian.houseqm.po.zj2db.UserInHouseQmCheckTask">
        <!--
          WARNING - @mbg.generated
        -->
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="squad_id" jdbcType="INTEGER" property="squadId"/>
        <result column="user_id" jdbcType="INTEGER" property="userId"/>
        <result column="role_type" jdbcType="INTEGER" property="roleType"/>
        <result column="project_id" jdbcType="INTEGER" property="projectId"/>
        <result column="task_id" jdbcType="INTEGER" property="taskId"/>
        <result column="create_at" jdbcType="TIMESTAMP" property="createAt"/>
        <result column="update_at" jdbcType="TIMESTAMP" property="updateAt"/>
        <result column="delete_at" jdbcType="TIMESTAMP" property="deleteAt"/>
        <result column="can_approve" jdbcType="INTEGER" property="canApprove"/>
        <result column="can_direct_approve" jdbcType="INTEGER" property="canDirectApprove"/>
        <result column="can_reassign" jdbcType="INTEGER" property="canReassign"/>
        <result column="adminer_status" jdbcType="INTEGER" property="adminerStatus"/>
    </resultMap>
    <sql id="Base_Column_List">
        <!--
          WARNING - @mbg.generated
        -->
        id, squad_id, user_id, role_type, project_id, task_id, create_at, update_at, delete_at,
        can_approve, can_direct_approve, can_reassign,adminer_status
    </sql>

    <select id="selectByUserId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_in_house_qm_check_task
        where user_id = #{userId,jdbcType=INTEGER} and delete_at is null
    </select>
    <select id="selectByTaskIds" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from user_in_house_qm_check_task
        where task_id in
        <foreach close=")" collection="idList" index="index" item="id" open="(" separator=",">
            #{id}
        </foreach>
        <if test="deleted =='false'">
            and delete_at is null
        </if>
    </select>
    <!--List<UserInHouseQmCheckTask> searchByTaskIdUserIdRoleType(@Param("userId")Integer userId, @Param("task_id")Integer task_id, @Param("checker") Integer checker);-->
    <select id="searchByTaskIdUserIdRoleType" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        user_in_house_qm_check_task
        WHERE user_id = #{userId}
        AND task_id =#{task_id}
        AND role_type=#{checker}
        and delete_at is null
    </select>
    <!--List<UserInHouseQmCheckTask> searchBySquadIdIn(@Param("squadIds") List<Integer> squadIds);-->
    <select id="searchBySquadIdIn" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        user_in_house_qm_check_task
        <where>
            <if test="squadIds.size()>0">
                squad_id in
                <foreach collection="squadIds" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            AND
            delete_at is NULL
        </where>
    </select>
    <select id="searchByCondition" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        FROM
        user_in_house_qm_check_task
        where
        task_id =#{task_id}
        AND user_id = #{userId}
        AND delete_at is null
    </select>
    <select id="searchByTaskIdSquadIdIn" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        FROM
        user_in_house_qm_check_task
        <where>
            task_id =#{task_id}
            <if test="existsSquadIds.size()>0">
                and
                squad_id in
                <foreach collection="existsSquadIds" index="index" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            AND delete_at is null
        </where>
    </select>

    <select id="selectSquadIdByTaskIdAndUserIdAndRoleTypeAndNoDeleted" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        from user_in_house_qm_check_task
        WHERE task_id=#{taskId} AND user_id =#{uid} AND role_type =#{checker}
        <if test="deleted=='false'">
            AND delete_at IS NULL
        </if>
    </select>

    <select id="selectUserIdBySquadIdInAndNoDeleted" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        from user_in_house_qm_check_task
        <where>
            <if test="squadIds.size()>0">squad_id IN
                <foreach collection="squadIds" item="item" index="index" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="deleted=='false'">
                AND delete_at IS NULL
            </if>
        </where>
    </select>

    <select id="selectUpdateAtByTaskIdAndNoDeletedOrderByUpdateAt" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user_in_house_qm_check_task
        WHERE task_id=#{taskId}
        <if test="deleted=='false'">
            AND delete_at IS NULL
        </if>
        ORDER BY update_at DESC
    </select>

</mapper>